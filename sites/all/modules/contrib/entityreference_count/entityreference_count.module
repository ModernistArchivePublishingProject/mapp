<?php

/**
 * @file
 * Defines a field type for counting the references to a entity.
 */

/**
 * Implements hook_field_info().
 */
function entityreference_count_field_info() {
  return array(
    'entityreference_count' => array(
      'label' => t('Entity reference count'),
      'description' => t('Store entity reference count data in the database.'),
      'instance_settings' => array(
        'counted_reference_fields' => array(),
        'count_only_published' => TRUE,
      ),
      'default_widget' => 'entityreference_count_widget',
      'default_formatter' => 'entityreference_count_formatter_default',
    ),
  );
}

/**
 * Generate a list of available node reference fields to count.
 *
 * @param $bundle
 *   The field instance bundle.
 * @return
 *   An array of nodereference fields that are available to count.
 */
function entityreference_count_field_options($bundle) {
  $field_types = field_info_fields();
  $field_options = array();

  foreach ($field_types as $field_type) {
    if ($field_type['type'] == 'entityreference' && isset($field_type['settings']['handler_settings']['target_bundles'][$bundle]) && $field_type['settings']['handler_settings']['target_bundles'][$bundle] === $bundle) {
      $field_options[$field_type['field_name']] = check_plain($field_type['field_name']);
    }
  }

  return $field_options;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function entityreference_count_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $options = entityreference_count_field_options($instance['bundle']);
  $form = array();

  if (empty($options)) {
    $form['counted_reference_fields_empty'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There are no entity reference fields to count. If you wish to count the number of references to a entity of this type, add a entityreference field to another content type, allowing it to reference this content type.'),
      '#suffix' => '</p>',
    );
  }
  else {
    $form['counted_reference_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Entity reference fields that may be counted'),
      '#description' => t('Select the entity refence fields that you would like to count.'),
      '#multiple' => TRUE,
      '#default_value' => $settings['counted_reference_fields'],
      '#options' => $options,
    );
    $form['count_only_published'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not count references from unpublished nodes.'),
      '#default_value' => $settings['count_only_published'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_schema().
 */
function entityreference_count_field_schema($field) {
  return array(
    'columns' => array(
      'count' => array(
        'type'     => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function entityreference_count_field_is_empty($item, $field) {
  return is_null($item['count']);
}

/**
 * Implements hook_field_widget_info().
 */
function entityreference_count_field_widget_info() {
  return array(
    'entityreference_count_widget' => array(
      'label' => t('default'),
      'description' => t('The count is calculated, so there is no data to enter.'),
      'field types' => array('entityreference_count'),
      'behaviors' => array(
        'default_value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function entityreference_count_field_formatter_info() {
  return array(
    'entityreference_count_default' => array(
      'label' => t('Default'),
      'field types' => array('entityreference_count'),
    ),
    'entityreference_count_nonzero' => array(
      'label' => t('Non-zero'),
      'field types' => array('entityreference_count'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function entityreference_count_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'entityreference_count_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['count']);
      }
      break;

    case 'entityreference_count_nonzero':
      foreach ($items as $delta => $item) {
        if ($item['count'] > 0) {
          $element[$delta] = array('#markup' => $item['count']);
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_presave().
 */
function entityreference_count_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'entityreference_count') {
    $items[0]['count'] = entityreference_count_get_count($instance['settings'], $entity_type, $entity);
  }
}

/**
 * Get the db tables and columns for an array of field names.
 *
 * @param $field_names
 *   An array of field names.
 * @return
 *   An indexed array of table and column names.
 */
function entityreference_count_get_fields_db($field_names) {
  $db = array();

  if (!empty($field_names)) {
    foreach ($field_names as $field_name) {
      $field = field_info_field($field_name);
      // Make sure we are dealing with SQL storage.
      if ($field['storage']['type'] == 'field_sql_storage') {
        $db_info = $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
        $tables = array_keys($db_info);
        $table = array_pop($tables);
        $db[] = array(
          'table' => $table,
          'column' => array_pop($db_info[$table]),
        );
      }
    }
  }

  return $db;
}

/**
 * Get the count of entity references to a particular entity
 *
 * @param $settings
 *   The settings for this field instance.
 * @param $entity_type
 *   The type of entity being referenced
 * @param $entity
 *   The entity being referenced.
 * @return
 *   A count of the number of references to the entity
 */
function entityreference_count_get_count($settings, $entity_type, $entity) {
  // Get the db info for the node reference fields.
  $db = entityreference_count_get_fields_db($settings['counted_reference_fields']);

  // Get the entity info
  $entity_info = entity_get_info($entity_type);

  // if not defined the base table and entity key id omit the count
  if (empty($entity_info['base table']) && empty($entity_info['entity keys']['id'])) {
    return;
  }

  if (!empty($db)) {
    $base_table = $entity_info['base table'];
    $entity_key_id = $entity_info['entity keys']['id'];

    $query = db_select($base_table, 'e');
    $query->fields('e', array($entity_key_id));
    $alias = $query->innerJoin($db[0]['table'], 'nr', '%alias.entity_id = e.' . $entity_key_id);
    $query->condition("{$alias}.{$db[0]['column']}", $entity->{$entity_key_id});
    if ($settings['count_only_published']) {
      $query->condition('e.status', 1);
    }

    unset($db[0]);

    // Add each additional field to the query via a UNION ALL.
    foreach ($db as $d) {
      $select = db_select($base_table, 'e');
      $select->fields('e', array($entity_key_id));
      $alias = $select->innerJoin($d['table'], 'nr', '%alias.entity_id = e.' . $entity_key_id);
      $select->condition("{$alias}.{$d['column']}", $entity->{$entity_key_id});
      if ($settings['count_only_published']) {
        $select->condition('n.status', 1);
      }

      $query->union($select, 'UNION ALL');
    }

    $query->addTag('entityreference_count');

    return $query->countQuery()->execute()->fetchField();
  }

  return 0;
}

/**
 * Implements hook_entity_insert().
 */
function entityreference_count_entity_insert($entity, $entity_type) {
  entityreference_count_references_update($entity_type, $entity);
}

/**
 * Implements hook_entity_update().
 */
function entityreference_count_entity_update($entity, $entity_type) {
  entityreference_count_references_update($entity_type, $entity);
}

/**
 * Implements hook_entity_delete().
 *
 * hook_entity_delete() runs before database queries are executed, so
 * we cannot just update the counts here or it will reflect the count
 * before anything has actually been deleted.
 *
 * The workaround is an ugly hack. We add a delay flag to
 * entityreference_count_references_update(). This allows us to add ids
 * to a statically cached array instead of counting them immediately.
 * The cached array can then be processed via hook_exit() after the
 * database updates are done so that we get a correct count.
 *
 * @see entityreference_count_references_update().
 * @see entityreference_count_delayed_entity_ids().
 * @see entityreference_count_exit().
 */
function entityreference_count_entity_delete($entity, $entity_type) {
  entityreference_count_references_update($entity_type, $entity, TRUE);
}

/**
 * Get an array of entity reference fields for a particular entity bundle.
 *
 * @param $entity_type
 *   The entity type
 * @param $bundle
 *   The content type for which we want a list of entity reference fields.
 * @return
 *   An array of fields.
 */
function entityreference_count_get_entityreference_fields($entity_type, $bundle) {
  $entityreference_fields = array();
  $fields = field_info_fields();

  foreach ($fields as $field) {
    if ($field['type'] == 'entityreference' && isset($field['bundles'][$entity_type]) && in_array($bundle, $field['bundles'][$entity_type])) {
      $entityreference_fields[$field['field_name']] = $field;
    }
  }

  return $entityreference_fields;
}

/**
 * From a set of entity reference fields get those that are counted by a entityreference count field.
 *
 * @param $entity_type
 *   The entity type
 * @param $entity_references
 *   An array of entity reference fields.
 * @return
 *   An array of field names.
 */
function entityreference_count_get_counted_entityreference_fields($entity_type, $entity_references) {
  $counted_fields = array();
  $bundles = field_info_instances($entity_type);

  foreach ($bundles as $bundle) {
    foreach ($bundle as $instance) {
      if (isset($instance['settings']['counted_reference_fields'])) {
        foreach ($entity_references as $entity_reference) {
          if (in_array($entity_reference['field_name'], $instance['settings']['counted_reference_fields'], TRUE)) {
            $counted_fields[$entity_reference['field_name']] = $entity_reference['settings']['target_type'];
          }
        }
      }
    }
  }

  return $counted_fields;
}

/**
 * From a set of entity reference fields get all the target_ids that need to be updated.
 *
 * @param $entity
 *   The entity object.
 * @param $counted_fields
 *   An array of entity reference fields.
 * @return
 *   An array of target_ids.
 */
function entityreference_count_get_referenced_ids($entity, $counted_fields) {
  $target_ids = array();

  foreach ($counted_fields as $counted_field => $target_type) {
    // Get all the updated target_ids.
    $updated_entityreferences = $entity->$counted_field;

    foreach ($updated_entityreferences as $language => $deltas) {
      foreach ($deltas as $delta => $entityreference) {
        $target_ids[$entityreference['target_id']] = $target_type;
      }
    }

    // Get all the original ids.
    if (isset($entity->original)) {
      $original_entityreferences = $entity->original->$counted_field;

      foreach ($original_entityreferences as $language => $deltas) {
        foreach ($deltas as $delta => $entityreference) {
          $target_ids[$entityreference['target_id']] = $target_type;
        }
      }
    }
  }

  return $target_ids;
}

/**
 * Identify counted entity references on a entity and trigger an update of the referenced entity.
 *
 * @param $entity_type
 *   The entity type
 * @param $entity
 *   The entity object.
 * @param $delay
 *   Whether the actual count update should be delayed. See the hook_entity_delete
 *   implementation above for more info.
 */
function entityreference_count_references_update($entity_type, $entity, $delay = FALSE) {
  if (!$entity_type || !isset($entity->type)) {
    return;
  }

  // Get all the entity reference fields for this content type.
  $entityreference_fields = entityreference_count_get_entityreference_fields($entity_type, $entity->type);

  // If there are no entity references for this content type then there is nothing to count.
  if (empty($entityreference_fields)) {
    return;
  }

  // Get all the entity reference fields for this content type that are counted by a entityreference count field.
  $counted_fields = entityreference_count_get_counted_entityreference_fields($entity_type, $entityreference_fields);

  // If there are no entity references being counted for this content type then there is nothing to count.
  if (empty($counted_fields)) {
    return;
  }

  // Get all the entity_ids that need to be updated.
  $entity_ids = entityreference_count_get_referenced_ids($entity, $counted_fields);

  // Update the counts on the referenced entities.
  foreach ($entity_ids as $entity_id => $entity_type) {
    // Wait to update the count for this id.
    if ($delay) {
      entityreference_count_delayed_entity_ids($entity_type, $entity_id);
    }
    // Update the count immediately.
    else {
      entityreference_count_update_count($entity_type, $entity_id);
    }
  }
}

/**
 * Trigger an update of the fields on a particular entity.
 *
 * @param $entity_type
 *   The entity type being referenced.
 * @param $entity_id
 *   The entity_id of the entity being referenced.
 */
function entityreference_count_update_count($entity_type, $entity_id) {
  $entity = entity_load($entity_type, array($entity_id));
  if (isset($entity[$entity_id])) {
    field_attach_presave($entity_type, $entity[$entity_id]);
    field_attach_update($entity_type, $entity[$entity_id]);
  }
}

/**
 * Statically cache any entity_ids that should have their count update delayed.
 *
 * @param $entity_id
 *   A entity_id that should be added to the cache.
 * @return
 *   An array of entity_ids.
 */
function entityreference_count_delayed_entity_ids($entity_type = NULL, $entity_id = NULL) {
  $entity_ids = &drupal_static(__FUNCTION__, array());

  if (!is_null($entity_ids) && !isset($entity_ids[$entity_id]) && !is_null($entity_type)) {
    $entity_ids[$entity_id] = $entity_type;
  }

  return $entity_ids;
}

/**
 * Implements hook_exit().
 */
function entityreference_count_exit() {
  $entity_ids = entityreference_count_delayed_entity_ids();

  if (!empty($entity_ids)) {
    foreach ($entity_ids as $entity_id => $entity_type) {
      entityreference_count_update_count($entity_type, $entity_id);
    }
  }
}
